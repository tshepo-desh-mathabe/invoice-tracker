/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all clients or search by email/phone */
        get: operations["ClientController_findAll"];
        put?: never;
        /** Create a new client */
        post: operations["ClientController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/client/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get client by ID (currently uses email in service) */
        get: operations["ClientController_findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/banking-details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new bank account */
        post: operations["BankingDetailsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/banking-details/{accountNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find bank account by account number */
        get: operations["BankingDetailsController_findByAccountNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/banks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all banks */
        get: operations["BankNameController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/banks/search/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search banks by name */
        get: operations["BankNameController_findByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payment-method": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all payment methods */
        get: operations["PaymentMethodController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update transaction by reference */
        put: operations["TransactionController_updateByReference"];
        /** Create a new transaction */
        post: operations["TransactionController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/transactions/{trxnReference}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a transaction by its reference */
        get: operations["TransactionController_findByReference"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get invoices with optional filters */
        get: operations["InvoiceController_findInvoices"];
        put?: never;
        /** Create a new invoice */
        post: operations["InvoiceController_createInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoice-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new invoice item */
        post: operations["InvoiceItemController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invoice-item/name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get invoice items by name (LIKE search) */
        get: operations["InvoiceItemController_getByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateClientDto: {
            fullName: string;
            email: string;
            phoneNumber: string;
            bankName: string;
            accountNumber: string;
        };
        ErrorResponseDto: {
            message: Record<string, never>;
            error: string;
            statusCode: number;
        };
        BankNameDto: {
            id: number;
            name: string;
            branchCode: string;
        };
        BankingDetailsDto: {
            id: number;
            bankName: components["schemas"]["BankNameDto"];
            accountNumber: string;
        };
        ClientDto: {
            id: number;
            fullName: string;
            email: string;
            phoneNumber: string;
            invoiceDtos: string[];
            bankingDetailsDto: components["schemas"]["BankingDetailsDto"];
        };
        CreateBankingDetailsDto: {
            bankName: string;
            accountNumber: string;
        };
        PaymentMethodDto: {
            id: number;
            /** @enum {string} */
            name: "CASH" | "EFT" | "CREDIT CARD" | "DEBIT CARD" | "CREDIT";
        };
        CreateTransactionDto: {
            trxnReference: string;
            client: string;
            amount: number;
            /** @enum {string} */
            paymentMethod: "CASH" | "EFT" | "CREDIT CARD" | "DEBIT CARD" | "CREDIT";
            /** @enum {string} */
            status: "PENDING" | "PAID" | "FAILED";
        };
        TransactionDto: {
            id: number;
            trxnReference: string;
            client: components["schemas"]["ClientDto"];
            amount: number;
            paymentMethod: components["schemas"]["PaymentMethodDto"];
            /** @enum {string} */
            status: "PENDING" | "PAID" | "FAILED";
            isFinalState: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            expiresAt: string;
        };
        UpdateTransactionDto: Record<string, never>;
        CreateInvoiceItemDto: {
            sku: string;
            /**
             * @description Name of the product
             * @example Milk
             */
            name: string;
            /**
             * @description Product description
             * @example 50g
             */
            description: string;
            /**
             * @description Quantity of the product
             * @example 2
             */
            quantity: number;
            /**
             * @description Unit price of the product
             * @example 199.99
             */
            unitPrice: number;
            /**
             * @description Total price (quantity * unitPrice)
             * @example 399.98
             */
            totalPrice: number;
        };
        CreateInvoiceDto: {
            trxnReference: string;
            clientEmail: string;
            amount: number;
            /** @enum {string} */
            status: "PENDING" | "PAID" | "FAILED";
            reason?: string;
            itemsDto: components["schemas"]["CreateInvoiceItemDto"][];
            transactionDto: components["schemas"]["CreateTransactionDto"];
        };
        InvoiceItemDto: {
            id: number;
            sku: string;
            name: string;
            description: string;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
        };
        InvoiceDto: {
            id: number;
            trxnReference: string;
            clientDto: components["schemas"]["ClientDto"];
            amount: number;
            /** @enum {string} */
            status: "PENDING" | "PAID" | "FAILED";
            reason?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            expiresAt: string;
            itemsDto: components["schemas"]["InvoiceItemDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ClientController_findAll: {
        parameters: {
            query: {
                term: string;
                flag: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    ClientController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClientDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    ClientController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    BankingDetailsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBankingDetailsDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    BankingDetailsController_findByAccountNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The bank account number */
                accountNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankingDetailsDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    BankNameController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankNameDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    BankNameController_findByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankNameDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    PaymentMethodController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of available payment methods */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    TransactionController_updateByReference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction reference string */
                trxnReference: unknown;
            };
            cookie?: never;
        };
        /** @description Partial transaction data to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTransactionDto"];
            };
        };
        responses: {
            /** @description Transaction updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    TransactionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTransactionDto"];
            };
        };
        responses: {
            /** @description Transaction created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    TransactionController_findByReference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction reference string */
                trxnReference: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    InvoiceController_findInvoices: {
        parameters: {
            query?: {
                /** @description Filter by transaction reference */
                trxnReference?: string;
                /** @description Filter by invoice creation date up to this date (ISO 8601) */
                untilCreateAt?: string;
                /** @description Filter by invoice expiration date up to this date (ISO 8601) */
                untilExpireAt?: string;
                /** @description Filter by transaction final state */
                isFinalState?: boolean;
                /** @description Sort by createdAt or expiresAt (default: expiresAt) */
                sortBy?: "createdAt" | "expiresAt";
                /** @description Items per page (default: 10) */
                limit?: number;
                /** @description Page number (default: 0) */
                page?: number;
                /** @description Filter by transaction payment method */
                paymentMethod?: "CASH" | "EFT" | "CREDIT CARD" | "DEBIT CARD" | "CREDIT";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invoices with total count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    InvoiceController_createInvoice: {
        parameters: {
            query: {
                flag: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvoiceDto"];
            };
        };
        responses: {
            /** @description Invoice created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceDto"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    InvoiceItemController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvoiceItemDto"];
            };
        };
        responses: {
            /** @description Item saved successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceItemController_getByName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceItemDto"][];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
